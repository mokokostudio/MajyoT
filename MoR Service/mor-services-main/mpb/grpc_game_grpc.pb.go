// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc_game.proto

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameService_GetHiddenBoss_FullMethodName = "/mpb.GameService/GetHiddenBoss"
	GameService_Fight_FullMethodName         = "/mpb.GameService/Fight"
	GameService_GetEnergy_FullMethodName     = "/mpb.GameService/GetEnergy"
	GameService_AddEnergy_FullMethodName     = "/mpb.GameService/AddEnergy"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	GetHiddenBoss(ctx context.Context, in *ReqGetHiddenBoss, opts ...grpc.CallOption) (*ResGetHiddenBoss, error)
	Fight(ctx context.Context, in *ReqFight, opts ...grpc.CallOption) (*ResFight, error)
	GetEnergy(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetEnergy, error)
	AddEnergy(ctx context.Context, in *ReqAddEnergy, opts ...grpc.CallOption) (*ResAddEnergy, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) GetHiddenBoss(ctx context.Context, in *ReqGetHiddenBoss, opts ...grpc.CallOption) (*ResGetHiddenBoss, error) {
	out := new(ResGetHiddenBoss)
	err := c.cc.Invoke(ctx, GameService_GetHiddenBoss_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Fight(ctx context.Context, in *ReqFight, opts ...grpc.CallOption) (*ResFight, error) {
	out := new(ResFight)
	err := c.cc.Invoke(ctx, GameService_Fight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetEnergy(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetEnergy, error) {
	out := new(ResGetEnergy)
	err := c.cc.Invoke(ctx, GameService_GetEnergy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddEnergy(ctx context.Context, in *ReqAddEnergy, opts ...grpc.CallOption) (*ResAddEnergy, error) {
	out := new(ResAddEnergy)
	err := c.cc.Invoke(ctx, GameService_AddEnergy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	GetHiddenBoss(context.Context, *ReqGetHiddenBoss) (*ResGetHiddenBoss, error)
	Fight(context.Context, *ReqFight) (*ResFight, error)
	GetEnergy(context.Context, *ReqUserId) (*ResGetEnergy, error)
	AddEnergy(context.Context, *ReqAddEnergy) (*ResAddEnergy, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) GetHiddenBoss(context.Context, *ReqGetHiddenBoss) (*ResGetHiddenBoss, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHiddenBoss not implemented")
}
func (UnimplementedGameServiceServer) Fight(context.Context, *ReqFight) (*ResFight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fight not implemented")
}
func (UnimplementedGameServiceServer) GetEnergy(context.Context, *ReqUserId) (*ResGetEnergy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergy not implemented")
}
func (UnimplementedGameServiceServer) AddEnergy(context.Context, *ReqAddEnergy) (*ResAddEnergy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEnergy not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_GetHiddenBoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetHiddenBoss)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetHiddenBoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetHiddenBoss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetHiddenBoss(ctx, req.(*ReqGetHiddenBoss))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Fight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Fight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_Fight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Fight(ctx, req.(*ReqFight))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetEnergy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetEnergy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetEnergy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetEnergy(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddEnergy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddEnergy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddEnergy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_AddEnergy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddEnergy(ctx, req.(*ReqAddEnergy))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpb.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHiddenBoss",
			Handler:    _GameService_GetHiddenBoss_Handler,
		},
		{
			MethodName: "Fight",
			Handler:    _GameService_Fight_Handler,
		},
		{
			MethodName: "GetEnergy",
			Handler:    _GameService_GetEnergy_Handler,
		},
		{
			MethodName: "AddEnergy",
			Handler:    _GameService_AddEnergy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_game.proto",
}
