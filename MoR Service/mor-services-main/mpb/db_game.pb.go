// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: db_game.proto

package mpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DBEnergy struct {
	Energy               uint32   `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
	RecoverAt            int64    `protobuf:"varint,2,opt,name=recover_at,json=recoverAt,proto3" json:"recover_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBEnergy) Reset()         { *m = DBEnergy{} }
func (m *DBEnergy) String() string { return proto.CompactTextString(m) }
func (*DBEnergy) ProtoMessage()    {}
func (*DBEnergy) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{0}
}
func (m *DBEnergy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBEnergy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBEnergy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBEnergy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBEnergy.Merge(m, src)
}
func (m *DBEnergy) XXX_Size() int {
	return m.Size()
}
func (m *DBEnergy) XXX_DiscardUnknown() {
	xxx_messageInfo_DBEnergy.DiscardUnknown(m)
}

var xxx_messageInfo_DBEnergy proto.InternalMessageInfo

func (m *DBEnergy) GetEnergy() uint32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *DBEnergy) GetRecoverAt() int64 {
	if m != nil {
		return m.RecoverAt
	}
	return 0
}

type DBFightHistory struct {
	WinTimes             map[uint32]uint32 `protobuf:"bytes,1,rep,name=win_times,json=winTimes,proto3" json:"win_times,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DBFightHistory) Reset()         { *m = DBFightHistory{} }
func (m *DBFightHistory) String() string { return proto.CompactTextString(m) }
func (*DBFightHistory) ProtoMessage()    {}
func (*DBFightHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{1}
}
func (m *DBFightHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBFightHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBFightHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBFightHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBFightHistory.Merge(m, src)
}
func (m *DBFightHistory) XXX_Size() int {
	return m.Size()
}
func (m *DBFightHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DBFightHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DBFightHistory proto.InternalMessageInfo

func (m *DBFightHistory) GetWinTimes() map[uint32]uint32 {
	if m != nil {
		return m.WinTimes
	}
	return nil
}

type DBHiddenBossFindHistory struct {
	BossExpireAt         map[uint64]int64 `protobuf:"bytes,1,rep,name=boss_expire_at,json=bossExpireAt,proto3" json:"boss_expire_at,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DBHiddenBossFindHistory) Reset()         { *m = DBHiddenBossFindHistory{} }
func (m *DBHiddenBossFindHistory) String() string { return proto.CompactTextString(m) }
func (*DBHiddenBossFindHistory) ProtoMessage()    {}
func (*DBHiddenBossFindHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{2}
}
func (m *DBHiddenBossFindHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBHiddenBossFindHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBHiddenBossFindHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBHiddenBossFindHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBHiddenBossFindHistory.Merge(m, src)
}
func (m *DBHiddenBossFindHistory) XXX_Size() int {
	return m.Size()
}
func (m *DBHiddenBossFindHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_DBHiddenBossFindHistory.DiscardUnknown(m)
}

var xxx_messageInfo_DBHiddenBossFindHistory proto.InternalMessageInfo

func (m *DBHiddenBossFindHistory) GetBossExpireAt() map[uint64]int64 {
	if m != nil {
		return m.BossExpireAt
	}
	return nil
}

type DBHiddenBoss struct {
	BossUuid             uint64            `protobuf:"varint,1,opt,name=boss_uuid,json=bossUuid,proto3" json:"boss_uuid,omitempty"`
	BossId               uint32            `protobuf:"varint,2,opt,name=boss_id,json=bossId,proto3" json:"boss_id,omitempty"`
	Finder               uint64            `protobuf:"varint,3,opt,name=finder,proto3" json:"finder,omitempty"`
	Hp                   uint64            `protobuf:"varint,4,opt,name=hp,proto3" json:"hp,omitempty"`
	ExpiredAt            int64             `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	LastFightTime        map[uint64]int64  `protobuf:"bytes,6,rep,name=last_fight_time,json=lastFightTime,proto3" json:"last_fight_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Dmgs                 map[uint64]uint64 `protobuf:"bytes,7,rep,name=dmgs,proto3" json:"dmgs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Killer               uint64            `protobuf:"varint,8,opt,name=killer,proto3" json:"killer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DBHiddenBoss) Reset()         { *m = DBHiddenBoss{} }
func (m *DBHiddenBoss) String() string { return proto.CompactTextString(m) }
func (*DBHiddenBoss) ProtoMessage()    {}
func (*DBHiddenBoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_7167ac24ec07e167, []int{3}
}
func (m *DBHiddenBoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBHiddenBoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBHiddenBoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBHiddenBoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBHiddenBoss.Merge(m, src)
}
func (m *DBHiddenBoss) XXX_Size() int {
	return m.Size()
}
func (m *DBHiddenBoss) XXX_DiscardUnknown() {
	xxx_messageInfo_DBHiddenBoss.DiscardUnknown(m)
}

var xxx_messageInfo_DBHiddenBoss proto.InternalMessageInfo

func (m *DBHiddenBoss) GetBossUuid() uint64 {
	if m != nil {
		return m.BossUuid
	}
	return 0
}

func (m *DBHiddenBoss) GetBossId() uint32 {
	if m != nil {
		return m.BossId
	}
	return 0
}

func (m *DBHiddenBoss) GetFinder() uint64 {
	if m != nil {
		return m.Finder
	}
	return 0
}

func (m *DBHiddenBoss) GetHp() uint64 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *DBHiddenBoss) GetExpiredAt() int64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

func (m *DBHiddenBoss) GetLastFightTime() map[uint64]int64 {
	if m != nil {
		return m.LastFightTime
	}
	return nil
}

func (m *DBHiddenBoss) GetDmgs() map[uint64]uint64 {
	if m != nil {
		return m.Dmgs
	}
	return nil
}

func (m *DBHiddenBoss) GetKiller() uint64 {
	if m != nil {
		return m.Killer
	}
	return 0
}

func init() {
	proto.RegisterType((*DBEnergy)(nil), "mpb.DBEnergy")
	proto.RegisterType((*DBFightHistory)(nil), "mpb.DBFightHistory")
	proto.RegisterMapType((map[uint32]uint32)(nil), "mpb.DBFightHistory.WinTimesEntry")
	proto.RegisterType((*DBHiddenBossFindHistory)(nil), "mpb.DBHiddenBossFindHistory")
	proto.RegisterMapType((map[uint64]int64)(nil), "mpb.DBHiddenBossFindHistory.BossExpireAtEntry")
	proto.RegisterType((*DBHiddenBoss)(nil), "mpb.DBHiddenBoss")
	proto.RegisterMapType((map[uint64]uint64)(nil), "mpb.DBHiddenBoss.DmgsEntry")
	proto.RegisterMapType((map[uint64]int64)(nil), "mpb.DBHiddenBoss.LastFightTimeEntry")
}

func init() { proto.RegisterFile("db_game.proto", fileDescriptor_7167ac24ec07e167) }

var fileDescriptor_7167ac24ec07e167 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0x76, 0xb2, 0x49, 0x9a, 0x1c, 0xbb, 0x51, 0x07, 0x31, 0x4b, 0x8a, 0x21, 0x06, 0x2f, 0x72,
	0x35, 0x05, 0xbd, 0x50, 0x14, 0xd4, 0x2c, 0x49, 0xa9, 0xd0, 0xab, 0x50, 0x11, 0xbc, 0x59, 0x76,
	0x9d, 0xe9, 0x66, 0xe8, 0xfe, 0x31, 0x33, 0x69, 0xcd, 0x43, 0x78, 0xef, 0x8d, 0xef, 0xe0, 0x63,
	0x78, 0xe9, 0x23, 0x48, 0x7c, 0x11, 0x99, 0x9f, 0xca, 0x96, 0x2d, 0x48, 0xef, 0xe6, 0xfb, 0xe6,
	0x9c, 0x39, 0xdf, 0xf9, 0xbe, 0x5d, 0xf0, 0x69, 0x12, 0xa5, 0x71, 0xce, 0x48, 0x25, 0x4a, 0x55,
	0x62, 0x2f, 0xaf, 0x92, 0xe9, 0x1c, 0x7a, 0x8b, 0x70, 0x59, 0x30, 0x91, 0x6e, 0xf1, 0x23, 0xe8,
	0x32, 0x73, 0x0a, 0xd0, 0x04, 0xcd, 0xfc, 0x95, 0x43, 0xf8, 0x31, 0x80, 0x60, 0x9f, 0xcb, 0x0b,
	0x26, 0xa2, 0x58, 0x05, 0xad, 0x09, 0x9a, 0x79, 0xab, 0xbe, 0x63, 0xe6, 0x6a, 0xfa, 0x15, 0xc1,
	0x60, 0x11, 0x1e, 0xf1, 0x74, 0xad, 0x8e, 0xb9, 0x54, 0xa5, 0xd8, 0xe2, 0x37, 0xd0, 0xbf, 0xe4,
	0x45, 0xa4, 0x78, 0xce, 0x64, 0x80, 0x26, 0xde, 0xec, 0xee, 0xb3, 0x27, 0x24, 0xaf, 0x12, 0x72,
	0xbd, 0x8e, 0x7c, 0xe4, 0xc5, 0xa9, 0xae, 0x59, 0x16, 0x4a, 0x6c, 0x57, 0xbd, 0x4b, 0x07, 0x47,
	0xaf, 0xc1, 0xbf, 0x76, 0x85, 0xef, 0x83, 0x77, 0xce, 0xae, 0x74, 0xe9, 0x23, 0x7e, 0x08, 0x9d,
	0x8b, 0x38, 0xdb, 0x30, 0xa3, 0xc7, 0x5f, 0x59, 0xf0, 0xaa, 0xf5, 0x12, 0x4d, 0x7f, 0x20, 0x18,
	0x2e, 0xc2, 0x63, 0x4e, 0x29, 0x2b, 0xc2, 0x52, 0xca, 0x23, 0x5e, 0xd0, 0x2b, 0x61, 0xa7, 0x30,
	0x48, 0x4a, 0x29, 0x23, 0xf6, 0xa5, 0xe2, 0x82, 0xe9, 0x75, 0xac, 0x3a, 0xe2, 0xd4, 0xdd, 0xd8,
	0x45, 0x34, 0x5e, 0x9a, 0x8e, 0xb9, 0xb2, 0x52, 0xf7, 0x93, 0x1a, 0x35, 0x7a, 0x0b, 0x0f, 0x1a,
	0x25, 0x75, 0xc9, 0xed, 0x1b, 0x24, 0x7b, 0x75, 0xc9, 0xdf, 0x3d, 0xd8, 0xaf, 0x0f, 0xc7, 0x07,
	0xd0, 0x37, 0x3a, 0x37, 0x1b, 0x4e, 0xdd, 0x13, 0x3d, 0x4d, 0x7c, 0xd8, 0x70, 0x8a, 0x87, 0xb0,
	0x67, 0x2e, 0x39, 0x75, 0xcb, 0x77, 0x35, 0x7c, 0x4f, 0x75, 0x80, 0x67, 0xbc, 0xa0, 0x4c, 0x04,
	0x9e, 0x69, 0x71, 0x08, 0x0f, 0xa0, 0xb5, 0xae, 0x82, 0xb6, 0xe1, 0x5a, 0xeb, 0x4a, 0x07, 0x6a,
	0x0d, 0xa0, 0xda, 0x81, 0x8e, 0x0d, 0xd4, 0x31, 0x73, 0x85, 0x4f, 0xe0, 0x5e, 0x16, 0x4b, 0x15,
	0x9d, 0xe9, 0xa8, 0x4c, 0x88, 0x41, 0xd7, 0xb8, 0xf4, 0xb4, 0xe1, 0x12, 0x39, 0x89, 0xa5, 0x32,
	0x91, 0xea, 0xb0, 0xac, 0x37, 0x7e, 0x56, 0xe7, 0xf0, 0x21, 0xb4, 0x69, 0x9e, 0xca, 0x60, 0xcf,
	0x3c, 0x71, 0xd0, 0x7c, 0x62, 0x91, 0xa7, 0xee, 0x03, 0x30, 0x85, 0x7a, 0x8b, 0x73, 0x9e, 0x65,
	0x4c, 0x04, 0x3d, 0xbb, 0x85, 0x45, 0xa3, 0x77, 0x80, 0x9b, 0xd3, 0x6e, 0x63, 0xf3, 0xe8, 0x05,
	0xf4, 0xff, 0x0d, 0xfb, 0x5f, 0x63, 0xbb, 0xd6, 0x18, 0x0e, 0x7f, 0xee, 0xc6, 0xe8, 0xd7, 0x6e,
	0x8c, 0x7e, 0xef, 0xc6, 0xe8, 0xdb, 0x9f, 0xf1, 0x9d, 0x4f, 0x1d, 0x72, 0x98, 0x57, 0x49, 0xd2,
	0x35, 0xbf, 0xd2, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0x59, 0xe1, 0xd7, 0x5b, 0x03,
	0x00, 0x00,
}

func (m *DBEnergy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBEnergy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBEnergy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecoverAt != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.RecoverAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Energy != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Energy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DBFightHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBFightHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBFightHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WinTimes) > 0 {
		for k := range m.WinTimes {
			v := m.WinTimes[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DBHiddenBossFindHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBHiddenBossFindHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBHiddenBossFindHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BossExpireAt) > 0 {
		for k := range m.BossExpireAt {
			v := m.BossExpireAt[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DBHiddenBoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBHiddenBoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBHiddenBoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Killer != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Killer))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Dmgs) > 0 {
		for k := range m.Dmgs {
			v := m.Dmgs[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.LastFightTime) > 0 {
		for k := range m.LastFightTime {
			v := m.LastFightTime[k]
			baseI := i
			i = encodeVarintDbGame(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintDbGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDbGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ExpiredAt != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Hp != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x20
	}
	if m.Finder != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.Finder))
		i--
		dAtA[i] = 0x18
	}
	if m.BossId != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.BossId))
		i--
		dAtA[i] = 0x10
	}
	if m.BossUuid != 0 {
		i = encodeVarintDbGame(dAtA, i, uint64(m.BossUuid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDbGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovDbGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DBEnergy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Energy != 0 {
		n += 1 + sovDbGame(uint64(m.Energy))
	}
	if m.RecoverAt != 0 {
		n += 1 + sovDbGame(uint64(m.RecoverAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBFightHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WinTimes) > 0 {
		for k, v := range m.WinTimes {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBHiddenBossFindHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BossExpireAt) > 0 {
		for k, v := range m.BossExpireAt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBHiddenBoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BossUuid != 0 {
		n += 1 + sovDbGame(uint64(m.BossUuid))
	}
	if m.BossId != 0 {
		n += 1 + sovDbGame(uint64(m.BossId))
	}
	if m.Finder != 0 {
		n += 1 + sovDbGame(uint64(m.Finder))
	}
	if m.Hp != 0 {
		n += 1 + sovDbGame(uint64(m.Hp))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovDbGame(uint64(m.ExpiredAt))
	}
	if len(m.LastFightTime) > 0 {
		for k, v := range m.LastFightTime {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if len(m.Dmgs) > 0 {
		for k, v := range m.Dmgs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDbGame(uint64(k)) + 1 + sovDbGame(uint64(v))
			n += mapEntrySize + 1 + sovDbGame(uint64(mapEntrySize))
		}
	}
	if m.Killer != 0 {
		n += 1 + sovDbGame(uint64(m.Killer))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDbGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDbGame(x uint64) (n int) {
	return sovDbGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DBEnergy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBEnergy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBEnergy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverAt", wireType)
			}
			m.RecoverAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBFightHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBFightHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBFightHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WinTimes == nil {
				m.WinTimes = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WinTimes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBHiddenBossFindHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBHiddenBossFindHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBHiddenBossFindHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossExpireAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossExpireAt == nil {
				m.BossExpireAt = make(map[uint64]int64)
			}
			var mapkey uint64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BossExpireAt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBHiddenBoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBHiddenBoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBHiddenBoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossUuid", wireType)
			}
			m.BossUuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossUuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossId", wireType)
			}
			m.BossId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finder", wireType)
			}
			m.Finder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Finder |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFightTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFightTime == nil {
				m.LastFightTime = make(map[uint64]int64)
			}
			var mapkey uint64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastFightTime[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dmgs == nil {
				m.Dmgs = make(map[uint64]uint64)
			}
			var mapkey uint64
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDbGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDbGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Dmgs[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killer", wireType)
			}
			m.Killer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDbGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDbGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDbGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDbGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDbGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDbGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDbGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDbGame = fmt.Errorf("proto: unexpected end of group")
)
