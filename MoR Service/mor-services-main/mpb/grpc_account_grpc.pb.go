// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc_account.proto

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_TelegramLogin_FullMethodName      = "/mpb.AccountService/TelegramLogin"
	AccountService_LoginTest_FullMethodName          = "/mpb.AccountService/LoginTest"
	AccountService_GenerateLoginToken_FullMethodName = "/mpb.AccountService/GenerateLoginToken"
	AccountService_LoginByToken_FullMethodName       = "/mpb.AccountService/LoginByToken"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// rpc RegisterAccount(ReqRegisterAccount) returns (AccountInfo);
	//
	//	rpc LoginByPassword(ReqLoginByPassword) returns (ResLoginByPassword);
	//	rpc GetAccountInfo(ReqUserId) returns (AccountInfo);
	//	rpc GetAccountInfoByAccount(ReqGetAccountInfoByAccount) returns (AccountInfo);
	//	rpc GenerateNonce(Empty) returns (ResGenerateNonce);
	//	rpc WebLoginByWallet(ReqWebLoginByWallet) returns (ResWebLoginByWallet);
	//	rpc GenerateAndSendEmailBindCode(ReqGenerateAndSendEmailBindCode) returns (Empty);
	//	rpc WebBindEmail(ReqWebBindEmail) returns (ResWebBindEmail);
	//	rpc GetAptosAccount(ReqUserId) returns (ResGetAptosAccount);
	//	rpc ChangePassword(ReqChangePassword) returns (Empty);
	//	rpc SendEmailResetPasswordCode(ReqSendEmailResetPasswordCode) returns (Empty);
	//	rpc CheckEmailResetPasswordCode(ReqCheckEmailResetPasswordCode) returns (ResCheckEmailResetPasswordCode);
	//	rpc ResetPasswordByEmail(ReqResetPasswordByEmail) returns (Empty);
	//	rpc ResetPasswordByEmailAndVCode(ReqResetPasswordByEmailAndVCode) returns (Empty);
	//	rpc BatchGetAccountsByWalletAddrs (ReqBatchGetAccountsByWalletAddrs) returns (ResBatchGetAccountsByWalletAddrs);
	TelegramLogin(ctx context.Context, in *ReqTelegramLogin, opts ...grpc.CallOption) (*ResTelegramLogin, error)
	LoginTest(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResLoginTest, error)
	GenerateLoginToken(ctx context.Context, in *ReqGenerateLoginToken, opts ...grpc.CallOption) (*ResGenerateLoginToken, error)
	LoginByToken(ctx context.Context, in *ReqLoginByToken, opts ...grpc.CallOption) (*ResLoginByToken, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) TelegramLogin(ctx context.Context, in *ReqTelegramLogin, opts ...grpc.CallOption) (*ResTelegramLogin, error) {
	out := new(ResTelegramLogin)
	err := c.cc.Invoke(ctx, AccountService_TelegramLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LoginTest(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResLoginTest, error) {
	out := new(ResLoginTest)
	err := c.cc.Invoke(ctx, AccountService_LoginTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GenerateLoginToken(ctx context.Context, in *ReqGenerateLoginToken, opts ...grpc.CallOption) (*ResGenerateLoginToken, error) {
	out := new(ResGenerateLoginToken)
	err := c.cc.Invoke(ctx, AccountService_GenerateLoginToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LoginByToken(ctx context.Context, in *ReqLoginByToken, opts ...grpc.CallOption) (*ResLoginByToken, error) {
	out := new(ResLoginByToken)
	err := c.cc.Invoke(ctx, AccountService_LoginByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// rpc RegisterAccount(ReqRegisterAccount) returns (AccountInfo);
	//
	//	rpc LoginByPassword(ReqLoginByPassword) returns (ResLoginByPassword);
	//	rpc GetAccountInfo(ReqUserId) returns (AccountInfo);
	//	rpc GetAccountInfoByAccount(ReqGetAccountInfoByAccount) returns (AccountInfo);
	//	rpc GenerateNonce(Empty) returns (ResGenerateNonce);
	//	rpc WebLoginByWallet(ReqWebLoginByWallet) returns (ResWebLoginByWallet);
	//	rpc GenerateAndSendEmailBindCode(ReqGenerateAndSendEmailBindCode) returns (Empty);
	//	rpc WebBindEmail(ReqWebBindEmail) returns (ResWebBindEmail);
	//	rpc GetAptosAccount(ReqUserId) returns (ResGetAptosAccount);
	//	rpc ChangePassword(ReqChangePassword) returns (Empty);
	//	rpc SendEmailResetPasswordCode(ReqSendEmailResetPasswordCode) returns (Empty);
	//	rpc CheckEmailResetPasswordCode(ReqCheckEmailResetPasswordCode) returns (ResCheckEmailResetPasswordCode);
	//	rpc ResetPasswordByEmail(ReqResetPasswordByEmail) returns (Empty);
	//	rpc ResetPasswordByEmailAndVCode(ReqResetPasswordByEmailAndVCode) returns (Empty);
	//	rpc BatchGetAccountsByWalletAddrs (ReqBatchGetAccountsByWalletAddrs) returns (ResBatchGetAccountsByWalletAddrs);
	TelegramLogin(context.Context, *ReqTelegramLogin) (*ResTelegramLogin, error)
	LoginTest(context.Context, *ReqUserId) (*ResLoginTest, error)
	GenerateLoginToken(context.Context, *ReqGenerateLoginToken) (*ResGenerateLoginToken, error)
	LoginByToken(context.Context, *ReqLoginByToken) (*ResLoginByToken, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) TelegramLogin(context.Context, *ReqTelegramLogin) (*ResTelegramLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TelegramLogin not implemented")
}
func (UnimplementedAccountServiceServer) LoginTest(context.Context, *ReqUserId) (*ResLoginTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginTest not implemented")
}
func (UnimplementedAccountServiceServer) GenerateLoginToken(context.Context, *ReqGenerateLoginToken) (*ResGenerateLoginToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLoginToken not implemented")
}
func (UnimplementedAccountServiceServer) LoginByToken(context.Context, *ReqLoginByToken) (*ResLoginByToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByToken not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_TelegramLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTelegramLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).TelegramLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_TelegramLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).TelegramLogin(ctx, req.(*ReqTelegramLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LoginTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LoginTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_LoginTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LoginTest(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GenerateLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGenerateLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GenerateLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GenerateLoginToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GenerateLoginToken(ctx, req.(*ReqGenerateLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LoginByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLoginByToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LoginByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_LoginByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LoginByToken(ctx, req.(*ReqLoginByToken))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpb.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TelegramLogin",
			Handler:    _AccountService_TelegramLogin_Handler,
		},
		{
			MethodName: "LoginTest",
			Handler:    _AccountService_LoginTest_Handler,
		},
		{
			MethodName: "GenerateLoginToken",
			Handler:    _AccountService_GenerateLoginToken_Handler,
		},
		{
			MethodName: "LoginByToken",
			Handler:    _AccountService_LoginByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_account.proto",
}
